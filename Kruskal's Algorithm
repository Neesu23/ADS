#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

class Edge {
public:
    int src, dest, weight;
};

class Graph {
public:
    int V, E;
    vector<Edge> edges;

    Graph(int V, int E) {
        this->V = V;
        this->E = E;
    }

    void addEdge(int src, int dest, int weight) {
        Edge edge = {src, dest, weight};
        edges.push_back(edge);
    }

    class DisjointSets {
    public:
        vector<int> parent, rank;

        DisjointSets(int n) {
            parent.resize(n);
            rank.resize(n, 0);
            for (int i = 0; i < n; ++i)
                parent[i] = i;
        }

        int find(int u) {
            if (u != parent[u])
                parent[u] = find(parent[u]);
            return parent[u];
        }

        void unionSets(int u, int v) {
            int rootU = find(u);
            int rootV = find(v);

            if (rank[rootU] < rank[rootV])
                parent[rootU] = rootV;
            else if (rank[rootU] > rank[rootV])
                parent[rootV] = rootU;
            else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    };

    void kruskalMST() {
        priority_queue<Edge, vector<Edge>, function<bool(Edge, Edge)>> Q(
            [](Edge a, Edge b) {
                return a.weight > b.weight;
            });

        for (Edge e : edges) {
            Q.push(e);
        }

        DisjointSets forest(V);
        vector<Edge> result;
        
        while (result.size() < V - 1 && !Q.empty()) {
            Edge e = Q.top();
            Q.pop();

            int u = forest.find(e.src);
            int v = forest.find(e.dest);

            if (u != v) {
                result.push_back(e);
                forest.unionSets(u, v);
            }
        }

        cout << "Edges in the Minimum Spanning Tree:" << endl;
        for (auto edge : result) {
            cout << edge.src << " -- " << edge.dest << " == " << edge.weight << endl;
        }
    }
};

int main() {
    int V = 4;  // Number of vertices
    int E = 5;  // Number of edges
    Graph graph(V, E);

    graph.addEdge(0, 1, 10);
    graph.addEdge(0, 2, 6);
    graph.addEdge(0, 3, 5);
    graph.addEdge(1, 3, 15);
    graph.addEdge(2, 3, 4);

    graph.kruskalMST();

    return 0;
}
